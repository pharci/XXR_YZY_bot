from django.contrib.auth.models import AbstractUser
from django.db import models

class User(AbstractUser):
    telegram_id = models.CharField('Telegram ID',max_length=12)
    username = models.CharField('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',max_length=30, unique=True)
    contact = models.CharField('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',max_length=20)
    avatar = models.ImageField('–ê–≤–∞—Ç–∞—Ä',upload_to="avatars/", null=True, blank=True)
    description = models.TextField('–ó–∞–º–µ—Ç–∫–∞', null=True, blank=True)

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

    def __str__(self):
        return self.username
    
    def get_orders(self):
        from datetime import timedelta  # –ò–º–ø–æ—Ä—Ç —Ç—É—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

        orders = self.orders.select_related("currency").order_by("-created_at")

        if not orders:
            return None
        
        orders_text = []

        for order in orders:
            orders_text.append(
                f"<b>–ó–∞–∫–∞–∑ ‚Ññ<code>{order.order_id}</code></b>\n"
                f"<b>üìù –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> {order.created_at + timedelta(hours=3):%d.%m.%Y %H:%M}\n"
                f"<b>üìù –°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
                f"<b>üì¶ –¢–∏–ø –∑–∞–∫–∞–∑–∞:</b> {order.type}\n"
                f"<b>üí∞ –°—É–º–º–∞:</b> { round(order.amount, 0) } {order.currency.user_currency}\n"
                f"<b>üîÑ –ü–æ–ª—É—á–µ–Ω–æ:</b> { round(order.amount_output, 0) } {order.currency.exchange_currency}\n"
                f"<b>üìä –ö—É—Ä—Å –æ–±–º–µ–Ω–∞:</b> {order.exchange_rate}\n"
                f"<b>üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥:</b> {order.promocode_usages.first().promocode.code if order.promocode_usages.exists() else '–ù–µ—Ç'}\n"
            )
        return orders_text
        

    
class TimestampMixin(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

class UserActivity(TimestampMixin):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="activities", verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    activity_type = models.CharField('–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', max_length=255)
    device = models.CharField('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', max_length=255, null=True, blank=True)
    ip_address = models.GenericIPAddressField('IP Adress', null=True, blank=True)

    class Meta:
            verbose_name = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            verbose_name_plural = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    def __str__(self):
        return f"{self.user} - {self.activity_type}"
