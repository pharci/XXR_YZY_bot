from django.db import models
from enum import Enum
from admin_app.bot.models import Tariff
from datetime import timedelta
from django_jsonform.models.fields import JSONField

class OrderTypeEnum(Enum):
    STUDY = "study", "–û–±—É—á–µ–Ω–∏–µ"
    EXCHANGE = "exchange", "–û–±–º–µ–Ω"
    SAFEPAY = "safepay", "–°–∞–º–æ–≤—ã–∫—É–ø"

    @classmethod
    def choices(cls):
        return [(item.value[0], item.value[1]) for item in cls]

class Conversion(models.Model):
    ITEMS_SCHEMA = {
        'type': 'dict',
        'keys': {
        },
        'additionalProperties': { 'type': 'number' }
    }

    user_currency = models.CharField("–í–∞–ª—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", max_length=10)
    exchange_currency = models.CharField("–í–∞–ª—é—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è", max_length=10)
    course = models.DecimalField("–ö—É—Ä—Å", max_digits=10, decimal_places=2)
    clean_course = models.DecimalField("–ß–∏—Å—Ç—ã–π –∫—É—Ä—Å", max_digits=10, decimal_places=2)
    grades = JSONField("–ì—Ä–∞–¥–∞—Ü–∏—è", schema=ITEMS_SCHEMA)
    enabled = models.BooleanField('–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ',default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    updated_at = models.DateTimeField("–ò–∑–º–µ–Ω–µ–Ω–æ", auto_now=True)

    class Meta:
        verbose_name = "–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞"
        verbose_name_plural = "–í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã"

    def __str__(self):
        return f"{self.user_currency} -> {self.exchange_currency}"


class Promocode(models.Model):
    user = models.ForeignKey("accounts.User", on_delete=models.SET_NULL, null=True, blank=True, related_name="promocodes", verbose_name="–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    code = models.CharField('–ö–æ–¥', max_length=50, unique=True)
    order_type = models.CharField("–¢–∏–ø –∑–∞–∫–∞–∑–∞", max_length=20, choices=OrderTypeEnum.choices())
    tariff = models.ForeignKey(Tariff, on_delete=models.SET_NULL, null=True, blank=True, related_name="promocodes", verbose_name="–¢–∞—Ä–∏—Ñ –æ–±—É—á–µ–Ω–∏—è")
    conversion = models.ForeignKey(Conversion, on_delete=models.CASCADE, related_name="promocodes", verbose_name="–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞", null=True, blank=True)
    discount = models.DecimalField('–°–∫–∏–¥–∫–∞', max_digits=10, decimal_places=2)
    activations = models.PositiveIntegerField('–ê–∫—Ç–∏–≤–∞—Ü–∏–π —Å–µ–π—á–∞—Å', default=0)
    max_activations = models.PositiveIntegerField('–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π')
    start_at = models.DateTimeField('–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å',)
    end_at = models.DateTimeField('–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ',)
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω', auto_now_add=True)
    updated_at = models.DateTimeField('–ò–∑–º–µ–Ω–µ–Ω', auto_now=True)

    class Meta:
        verbose_name = "–ü—Ä–æ–º–æ–∫–æ–¥"
        verbose_name_plural = "–ü—Ä–æ–º–æ–∫–æ–¥—ã"

    def __str__(self):
        return self.code
    
    def increase_activation(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–∞ 1, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç."""
        if self.activations < self.max_activations:
            self.activations += 1
            self.save()
            return True  # –£—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–æ
        return False  # –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–µ–≤—ã—à–µ–Ω
    
    def get_conversion(self):
        return self.conversion
    
    def get_user(self):
        return self.user
    
    def get_tariff(self):
        return self.tariff


class Order(models.Model):
    class OrderStatusChoices(models.TextChoices):
        CREATE = "create", "–°–æ–∑–¥–∞–ΩüÜï"
        PENDING = "pending", "–û–∂–∏–¥–∞–Ω–∏–µ‚è≥"
        SHIPPED = "shipped", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ωüì¶"
        CANCELED = "canceled", "–û—Ç–º–µ–Ω–µ–Ω‚ùå"
        COMPLETED = "completed", "–ó–∞–≤–µ—Ä—à–µ–Ω‚úÖ"

    user = models.ForeignKey("accounts.User", on_delete=models.CASCADE, null=True, related_name="orders", verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    order_id = models.PositiveIntegerField('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', unique=True, db_index=True)
    
    type = models.CharField(
        "–¢–∏–ø –∑–∞–∫–∞–∑–∞",
        max_length=20,
        choices=OrderTypeEnum.choices()
    )
    
    status = models.CharField(
        "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", 
        max_length=20, 
        choices=OrderStatusChoices.choices, 
        default=OrderStatusChoices.CREATE
    )
    contact = models.CharField('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', max_length=20)
    tariff = models.ForeignKey(Tariff, on_delete=models.SET_NULL, null=True, blank=True, related_name="orders", verbose_name="–¢–∞—Ä–∏—Ñ –æ–±—É—á–µ–Ω–∏—è")
    currency = models.ForeignKey("Conversion", on_delete=models.SET_NULL, null=True, blank=True, related_name="orders", verbose_name="–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞")
    amount = models.DecimalField('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏—Ç', max_digits=10, decimal_places=2)
    amount_output = models.DecimalField('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç', max_digits=10, decimal_places=2, null=True, blank=True)
    exchange_course = models.DecimalField('–ö—É—Ä—Å –æ–±–º–µ–Ω–∞', max_digits=10, decimal_places=2, null=True, blank=True)
    clean_course = models.DecimalField('–ß–∏—Å—Ç—ã–π –∫—É—Ä—Å', max_digits=10, decimal_places=2, null=True, blank=True)
    profit = models.DecimalField('–ü—Ä–∏–±—ã–ª—å', max_digits=10, decimal_places=2, null=True, blank=True)
    promocode = models.ForeignKey(Promocode, on_delete=models.CASCADE, related_name="orders", verbose_name="–ü—Ä–æ–º–æ–∫–æ–¥", null=True, blank=True)
    created_at = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)
    updated_at = models.DateTimeField('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è', auto_now=True)

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"
        permissions = [
            ('can_export_data', '–ú–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã'),
            ('can_view_clean_course', '–ú–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —á–∏—Å—Ç—ã–π –∫—É—Ä—Å'),
            ('can_view_receive', '–ú–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–±—ã–ª—å'),
        ]

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ {self.order_id} ({self.get_type_display()} - {self.get_status_display()})"
    
    def get_text(self):
        text = f"<b>–ó–∞–∫–∞–∑ ‚Ññ<code>{self.order_id}</code></b>\n" \
            f"<b>üìù –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> {self.created_at + timedelta(hours=3):%d.%m.%Y %H:%M}\n" \
            f"<b>üè∑Ô∏è –°—Ç–∞—Ç—É—Å:</b> {self.get_status_display()}\n" \
            f"<b>üì¶ –¢–∏–ø –∑–∞–∫–∞–∑–∞:</b> {self.get_type_display()}\n" \
            f"{f'<b>üõ†Ô∏è –¢–∞—Ä–∏—Ñ:</b> {self.tariff.name}\n' if self.tariff else ''}" \
            f"<b>üí∞ –°—É–º–º–∞:</b> {round(self.amount, 0)} {self.currency.user_currency if self.currency else ""}\n" \
            f"{f'<b>üîÑ –ü–æ–ª—É—á–µ–Ω–æ:</b> {round(self.amount_output, 0)} {self.currency.exchange_currency}\n' if self.amount_output else ''}" \
            f"{f'<b>üìä –ö—É—Ä—Å –æ–±–º–µ–Ω–∞:</b> {self.exchange_course}\n' if self.exchange_course else ''}" \
            f"<b>üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥:</b> {self.promocode.code if self.promocode else '–ù–µ—Ç'}\n"
        
        return text 
    
    def save(self, *args, **kwargs):
        if self.amount is not None and self.amount_output is not None and self.clean_course is not None:
            self.profit = round((self.amount / self.clean_course - self.amount_output) * self.clean_course, 2)
        super().save(*args, **kwargs)


